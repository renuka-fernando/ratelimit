admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  clusters:
    - name: ext_authz-grpc-service
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      load_assignment:
        cluster_name: ext_authz-grpc-service
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: cc-ext-auth
                  port_value: 9001
    - name: ratelimit
      type: STRICT_DNS
      connect_timeout: 1s
      lb_policy: ROUND_ROBIN
      protocol_selection: USE_CONFIGURED_PROTOCOL
      http2_protocol_options: {}
      load_assignment:
        cluster_name: ratelimit
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ratelimit
                      port_value: 8081
    - name: mock
      connect_timeout: 1s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: mock
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: mock-backend
                      port_value: 9999
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 8888
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress
                http_filters:
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      grpc_service:
                        envoy_grpc:
                          cluster_name: ext_authz-grpc-service
                        timeout: 0.250s
                      transport_api_version: V3
                  # Bandwidth Filter -----------------------------------------------------------------------------------------------------
                  - name: envoy.filters.http.bandwidth_limit
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit
                      stat_prefix: bandwidth_limiter_default
                  # Bandwidth Filter -----------------------------------------------------------------------------------------------------

                  # - name: envoy.filters.http.local_ratelimit
                  #   typed_config:
                  #     "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                  #     stat_prefix: http_local_rate_limiter
                  #     token_bucket:
                  #       max_tokens: 6
                  #       tokens_per_fill: 6
                  #       fill_interval: 60s
                  #     filter_enabled:
                  #       runtime_key: local_rate_limit_enabled
                  #       default_value:
                  #         numerator: 100
                  #         denominator: HUNDRED
                  #     filter_enforced:
                  #       runtime_key: local_rate_limit_enforced
                  #       default_value:
                  #         numerator: 100
                  #         denominator: HUNDRED
                  #     response_headers_to_add:
                  #       - append: false
                  #         header:
                  #           key: x-local-rate-limit
                  #           value: 'true'
                  #     local_rate_limit_per_downstream_connection: false
                  - name: envoy.filters.http.ratelimit
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                      domain: rl
                      request_type: external
                      timeout:
                        seconds: 10
                      stage: 0
                      rate_limited_as_resource_exhausted: true
                      failure_mode_deny: true
                      enable_x_ratelimit_headers: DRAFT_VERSION_03
                      rate_limit_service:
                        grpc_service:
                          envoy_grpc:
                            cluster_name: ratelimit
                        transport_api_version: V3
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: route
                  virtual_hosts:
                    - name: backend
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: "/ready"
                          direct_response:
                            status: "200"
                            body:
                              inline_string: "Ready"
                          typed_per_filter_config:
                            envoy.filters.http.ext_authz:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                              disabled: true
                        - match:
                            prefix: /test
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - source_cluster: {} # This action's value is populated by the "service-cluster" arg passed in when starting Envoy. In this example, it's "proxy" (see docker-compose-example.yml)
                                  - destination_cluster: {} # This action's value is populated by the value set in the above egress "cluster" field -- "mock"
                        - match:
                            prefix: /header
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - request_headers:
                                      header_name: "foo"
                                      descriptor_key: "foo"
                        - match:
                            prefix: /renuka
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - generic_key:
                                      descriptor_key: "k1"
                                      descriptor_value: "v1"
                              - actions:
                                  - generic_key:
                                      descriptor_key: "k2"
                                      descriptor_value: "v2"
                                      
                        - match:
                            prefix: /twoheader
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - request_headers:
                                      header_name: "content-length"
                                      descriptor_key: "foo1"
                                  - request_headers:
                                      header_name: "bar"
                                      descriptor_key: "bar1"
                              # - actions:
                              #     - request_headers:
                              #         header_name: "foo"
                              #         descriptor_key: "foo"
                              #     - request_headers:
                              #         header_name: "baz"
                              #         descriptor_key: "baz"

                        - match: {prefix: "/bandwidth/limit"}
                          route: {cluster: mock}
                          typed_per_filter_config:
                            envoy.filters.http.bandwidth_limit:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit
                              stat_prefix: bandwidth_limiter_custom_route
                              enable_mode: REQUEST_AND_RESPONSE
                              limit_kbps: 100
                              fill_interval: 0.1s
                        
                        - match:
                            prefix: /sms/v1/api-level
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - generic_key:
                                      descriptor_key: "org"
                                      descriptor_value: "John"
                                  - generic_key:
                                      descriptor_key: "api"
                                      descriptor_value: "/sms/v1"
                                  - generic_key:
                                      descriptor_key: "policy"
                                      descriptor_value: "5PerMin"
                        - match:
                            prefix: /sms/v1/resource-level
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - generic_key:
                                      descriptor_key: "org"
                                      descriptor_value: "John"
                                  - generic_key:
                                      descriptor_key: "res"
                                      descriptor_value: "/sms/v1/resource-level"
                                  - generic_key:
                                      descriptor_key: "policy"
                                      descriptor_value: "3PerMin"
                              - actions:
                                  - generic_key:
                                      descriptor_key: "org"
                                      descriptor_value: "John"
                                  - generic_key:
                                      descriptor_key: "api"
                                      descriptor_value: "/sms/v1"
                                  - generic_key:
                                      descriptor_key: "policy"
                                      descriptor_value: "5PerMin"
                        - match:
                            prefix: /sms/v1/method-level
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - generic_key:
                                      descriptor_key: "org"
                                      descriptor_value: "John"
                                  - header_value_match: # we do not want this if we have method level routes
                                      descriptor_value: "PUT"
                                      headers:
                                        name: ":method"
                                        exact_match: "PUT"
                                  - generic_key:
                                      descriptor_key: "resource"
                                      descriptor_value: "/sms/v1/resource-level"
                                  - generic_key:
                                      descriptor_key: "policy"
                                      descriptor_value: "2PerMin"
                              - actions:
                                  - generic_key:
                                      descriptor_key: "org"
                                      descriptor_value: "John"
                                  - header_value_match: # we do not want this if we have method level routes
                                      descriptor_value: "POST"
                                      headers:
                                        name: ":method"
                                        exact_match: "POST"
                                  - generic_key:
                                      descriptor_key: "resource"
                                      descriptor_value: "/sms/v1/resource-level"
                                  - generic_key:
                                      descriptor_key: "policy"
                                      descriptor_value: "1PerMin"
                              - actions:
                                  - generic_key:
                                      descriptor_key: "org"
                                      descriptor_value: "John"
                                  - generic_key:
                                      descriptor_key: "res"
                                      descriptor_value: "/sms/v1/resource-level"
                                  - generic_key:
                                      descriptor_key: "policy"
                                      descriptor_value: "3PerMin"
                              - actions:
                                  - generic_key:
                                      descriptor_key: "org"
                                      descriptor_value: "John"
                                  - generic_key:
                                      descriptor_key: "api"
                                      descriptor_value: "/sms/v1"
                                  - generic_key:
                                      descriptor_key: "policy"
                                      descriptor_value: "5PerMin"
                        - match:
                            prefix: /hotels/v1/ip-range
                          request_headers_to_remove: # we add this header from ext auth and remove from here.
                            - x-wso2-ratelimit-policy
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - generic_key:
                                      descriptor_key: "org"
                                      descriptor_value: "John"
                              - actions:
                                  - generic_key:
                                      descriptor_key: "org"
                                      descriptor_value: "John"
                                  - generic_key:
                                      descriptor_key: "resource"
                                      descriptor_value: "/hotels/v1"
                                  - generic_key:
                                      descriptor_key: "method"
                                      descriptor_value: "ALL"
                                  - generic_key:
                                      descriptor_key: "policy"
                                      descriptor_value: "3PerMin"
                                  - request_headers:
                                      descriptor_key: "sub"
                                      header_name: "x-wso2-ratelimit-sub"
                                      # skip_if_absent: true
                              - actions:
                                  - generic_key:
                                      descriptor_key: "org"
                                      descriptor_value: "John"
                                  - generic_key:
                                      descriptor_key: "resource"
                                      descriptor_value: "/hotels/v1"
                                  - generic_key:
                                      descriptor_key: "method"
                                      descriptor_value: "ALL"
                                  - generic_key:
                                      descriptor_key: "policy"
                                      descriptor_value: "3PerMin"
                                  - generic_key:
                                      descriptor_key: "spike"
                                      descriptor_value: "true"
