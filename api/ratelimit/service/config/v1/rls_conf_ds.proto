syntax = "proto3";

package ratelimit.service.config.v1;

import "envoy/service/discovery/v3/discovery.proto";

option java_package = "io.envoyproxy.ratelimit.service.config.v1";
option java_outer_classname = "RlsConfigProto";
option java_multiple_files = true;
option java_generic_services = true;
option go_package = "github.com/envoyproxy/go-control-plane/ratelimit/service/config/v1;configv1";

// [#protodoc-title: Rate Limit Config Discovery Service (RLS Conf DS)]

service RateLimitConfigDiscoveryService {
  // Rate limit configs to be configured with the Rate Limit Service
  rpc StreamRlsConfig(stream envoy.service.discovery.v3.DiscoveryRequest)
      returns (stream envoy.service.discovery.v3.DiscoveryResponse) {
  }
  // TODO: (renuka) do we need rpc FetchConfigs(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse) ?
}

// Rate-limit config model
message RateLimitConfig {
  string domain = 1;
  repeated RateLimitDescriptor descriptors = 2;
}

// Rate-limit descriptor model
message RateLimitDescriptor {
  string key = 1;
  string value = 2;
  RateLimitPolicy rate_limit = 3;
  repeated RateLimitDescriptor descriptors = 4;
  bool shadow_mode = 5;
}

// Rate-limit policy model
message RateLimitPolicy {
  string unit = 1;
  uint32 requests_per_unit = 2;
  bool unlimited = 3;
  string name = 4;
  repeated RateLimitReplace replaces = 5;
}

// Rate-limit replace model
message RateLimitReplace {
  string name = 1;
}
